{"message":"the trait bound `itertools::Format<'_, std::collections::btree_set::Iter<'_, &str>>: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/db.rs","byte_start":1882,"byte_end":1884,"line_start":75,"line_end":75,"column_start":26,"column_end":28,"is_primary":true,"text":[{"text":"    .set(participant_ids.eq(user_ids.iter().format(\",\")))","highlight_start":26,"highlight_end":28}],"label":"the trait `diesel::Expression` is not implemented for `itertools::Format<'_, std::collections::btree_set::Iter<'_, &str>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  &'a T\n  (T0, T1)\n  (T0, T1, T2)\n  (T0, T1, T2, T3)\n  (T0, T1, T2, T3, T4)\n  (T0, T1, T2, T3, T4, T5)\n  (T0, T1, T2, T3, T4, T5, T6)\n  (T0, T1, T2, T3, T4, T5, T6, T7)\nand 94 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `itertools::Format<'_, std::collections::btree_set::Iter<'_, &str>>` to implement `AsExpression<diesel::sql_types::Text>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `itertools::Format<'_, std::collections::btree_set::Iter<'_, &str>>: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/db.rs:75:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    .set(participant_ids.eq(user_ids.iter().format(\",\")))\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `itertools::Format<'_, std::collections::btree_set::Iter<'_, &str>>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             &'a T\u001b[0m\n\u001b[0m             (T0, T1)\u001b[0m\n\u001b[0m             (T0, T1, T2)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6)\u001b[0m\n\u001b[0m             (T0, T1, T2, T3, T4, T5, T6, T7)\u001b[0m\n\u001b[0m           and 94 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `itertools::Format<'_, std::collections::btree_set::Iter<'_, &str>>` to implement `AsExpression<diesel::sql_types::Text>`\u001b[0m\n\n"}
{"message":"the trait bound `itertools::Format<'_, std::collections::btree_set::Iter<'_, &str>>: AppearsOnTable<schema::rooms::table>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/db.rs","byte_start":1862,"byte_end":1865,"line_start":75,"line_end":75,"column_start":6,"column_end":9,"is_primary":true,"text":[{"text":"    .set(participant_ids.eq(user_ids.iter().format(\",\")))","highlight_start":6,"highlight_end":9}],"label":"the trait `AppearsOnTable<schema::rooms::table>` is not implemented for `itertools::Format<'_, std::collections::btree_set::Iter<'_, &str>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `AppearsOnTable<QS>`:\n  <&'a T as AppearsOnTable<QS>>\n  <(T0, T1) as AppearsOnTable<QS>>\n  <(T0, T1, T2) as AppearsOnTable<QS>>\n  <(T0, T1, T2, T3) as AppearsOnTable<QS>>\n  <(T0, T1, T2, T3, T4) as AppearsOnTable<QS>>\n  <(T0, T1, T2, T3, T4, T5) as AppearsOnTable<QS>>\n  <(T0, T1, T2, T3, T4, T5, T6) as AppearsOnTable<QS>>\n  <(T0, T1, T2, T3, T4, T5, T6, T7) as AppearsOnTable<QS>>\nand 94 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `expression::operators::Eq<schema::rooms::columns::participant_ids, itertools::Format<'_, std::collections::btree_set::Iter<'_, &str>>>` to implement `AsChangeset`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `itertools::Format<'_, std::collections::btree_set::Iter<'_, &str>>: AppearsOnTable<schema::rooms::table>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/db.rs:75:6\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    .set(participant_ids.eq(user_ids.iter().format(\",\")))\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `AppearsOnTable<schema::rooms::table>` is not implemented for `itertools::Format<'_, std::collections::btree_set::Iter<'_, &str>>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `AppearsOnTable<QS>`:\u001b[0m\n\u001b[0m             <&'a T as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(T0, T1) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(T0, T1, T2) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(T0, T1, T2, T3) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(T0, T1, T2, T3, T4) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(T0, T1, T2, T3, T4, T5) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(T0, T1, T2, T3, T4, T5, T6) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m             <(T0, T1, T2, T3, T4, T5, T6, T7) as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m           and 94 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `expression::operators::Eq<schema::rooms::columns::participant_ids, itertools::Format<'_, std::collections::btree_set::Iter<'_, &str>>>` to implement `AsChangeset`\u001b[0m\n\n"}
{"message":"the trait bound `itertools::Format<'_, std::collections::btree_set::Iter<'_, &str>>: QueryFragment<_>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/db.rs","byte_start":1931,"byte_end":1935,"line_start":76,"line_end":76,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"    .get_result(conn);","highlight_start":17,"highlight_end":21}],"label":"the trait `QueryFragment<_>` is not implemented for `itertools::Format<'_, std::collections::btree_set::Iter<'_, &str>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/db.rs","byte_start":1920,"byte_end":1930,"line_start":76,"line_end":76,"column_start":6,"column_end":16,"is_primary":false,"text":[{"text":"    .get_result(conn);","highlight_start":6,"highlight_end":16}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `QueryFragment<DB, SP>`:\n  <&'a T as QueryFragment<DB>>\n  <() as QueryFragment<DB>>\n  <(T0, T1) as QueryFragment<__DB>>\n  <(T0, T1, T2) as QueryFragment<__DB>>\n  <(T0, T1, T2, T3) as QueryFragment<__DB>>\n  <(T0, T1, T2, T3, T4) as QueryFragment<__DB>>\n  <(T0, T1, T2, T3, T4, T5) as QueryFragment<__DB>>\n  <(T0, T1, T2, T3, T4, T5, T6) as QueryFragment<__DB>>\nand 227 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `Assign<ColumnWrapperForUpdate<participant_ids>, Format<'_, Iter<'_, &str>>>` to implement `QueryFragment<_>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the full type name has been written to '/Users/mac/Documents/Learning/Chat-Rust-React/Server/rust-react-chat/target/debug/deps/rust_react_chat-0a1703c367b7b9aa.long-type-7646208291587296456.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `UpdateStatement<table, WhereClause<Grouped<Eq<id, Bound<Text, String>>>>, Assign<..., ...>, ...>` to implement `QueryFragment<_>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the full type name has been written to '/Users/mac/Documents/Learning/Chat-Rust-React/Server/rust-react-chat/target/debug/deps/rust_react_chat-0a1703c367b7b9aa.long-type-229587550759029850.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `UpdateStatement<table, WhereClause<Grouped<Eq<id, Bound<Text, String>>>>, Assign<..., ...>>` to implement `LoadQuery<'_, _, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the full type name has been written to '/Users/mac/Documents/Learning/Chat-Rust-React/Server/rust-react-chat/target/debug/deps/rust_react_chat-0a1703c367b7b9aa.long-type-5987731672179071003.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `get_result`","code":null,"level":"note","spans":[{"file_name":"/Users/mac/.cargo/registry/src/github.com-1ecc6299db9ec823/diesel-2.1.0/src/query_dsl/mod.rs","byte_start":59336,"byte_end":59362,"line_start":1723,"line_end":1723,"column_start":15,"column_end":41,"is_primary":true,"text":[{"text":"        Self: LoadQuery<'query, Conn, U>,","highlight_start":15,"highlight_end":41}],"label":"required by this bound in `RunQueryDsl::get_result`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `itertools::Format<'_, std::collections::btree_set::Iter<'_, &str>>: QueryFragment<_>` is not satisfied\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/db.rs:76:17\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m76\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    .get_result(conn);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `QueryFragment<_>` is not implemented for `itertools::Format<'_, std::collections::btree_set::Iter<'_, &str>>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `QueryFragment<DB, SP>`:\u001b[0m\n\u001b[0m               <&'a T as QueryFragment<DB>>\u001b[0m\n\u001b[0m               <() as QueryFragment<DB>>\u001b[0m\n\u001b[0m               <(T0, T1) as QueryFragment<__DB>>\u001b[0m\n\u001b[0m               <(T0, T1, T2) as QueryFragment<__DB>>\u001b[0m\n\u001b[0m               <(T0, T1, T2, T3) as QueryFragment<__DB>>\u001b[0m\n\u001b[0m               <(T0, T1, T2, T3, T4) as QueryFragment<__DB>>\u001b[0m\n\u001b[0m               <(T0, T1, T2, T3, T4, T5) as QueryFragment<__DB>>\u001b[0m\n\u001b[0m               <(T0, T1, T2, T3, T4, T5, T6) as QueryFragment<__DB>>\u001b[0m\n\u001b[0m             and 227 others\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Assign<ColumnWrapperForUpdate<participant_ids>, Format<'_, Iter<'_, &str>>>` to implement `QueryFragment<_>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full type name has been written to '/Users/mac/Documents/Learning/Chat-Rust-React/Server/rust-react-chat/target/debug/deps/rust_react_chat-0a1703c367b7b9aa.long-type-7646208291587296456.txt'\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `UpdateStatement<table, WhereClause<Grouped<Eq<id, Bound<Text, String>>>>, Assign<..., ...>, ...>` to implement `QueryFragment<_>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full type name has been written to '/Users/mac/Documents/Learning/Chat-Rust-React/Server/rust-react-chat/target/debug/deps/rust_react_chat-0a1703c367b7b9aa.long-type-229587550759029850.txt'\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `UpdateStatement<table, WhereClause<Grouped<Eq<id, Bound<Text, String>>>>, Assign<..., ...>>` to implement `LoadQuery<'_, _, _>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full type name has been written to '/Users/mac/Documents/Learning/Chat-Rust-React/Server/rust-react-chat/target/debug/deps/rust_react_chat-0a1703c367b7b9aa.long-type-5987731672179071003.txt'\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `get_result`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/mac/.cargo/registry/src/github.com-1ecc6299db9ec823/diesel-2.1.0/src/query_dsl/mod.rs:1723:15\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1723\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self: LoadQuery<'query, Conn, U>,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `RunQueryDsl::get_result`\u001b[0m\n\n"}
{"message":"the trait bound `ReturningClause<(schema::rooms::columns::id, schema::rooms::columns::name, schema::rooms::columns::last_message, schema::rooms::columns::participant_ids, schema::rooms::columns::created_at)>: QueryFragment<Sqlite, DoesNotSupportReturningClause>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/db.rs","byte_start":1931,"byte_end":1935,"line_start":76,"line_end":76,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"    .get_result(conn);","highlight_start":17,"highlight_end":21}],"label":"the trait `QueryFragment<Sqlite, DoesNotSupportReturningClause>` is not implemented for `ReturningClause<(schema::rooms::columns::id, schema::rooms::columns::name, schema::rooms::columns::last_message, schema::rooms::columns::participant_ids, schema::rooms::columns::created_at)>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/db.rs","byte_start":1920,"byte_end":1930,"line_start":76,"line_end":76,"column_start":6,"column_end":16,"is_primary":false,"text":[{"text":"    .get_result(conn);","highlight_start":6,"highlight_end":16}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `QueryFragment<DB, SP>`:\n  <ReturningClause<Expr> as QueryFragment<DB, PgLikeReturningClause>>\n  <ReturningClause<Expr> as QueryFragment<DB, sqlite::backend::SqliteReturningClause>>\n  <ReturningClause<Expr> as QueryFragment<DB>>","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `ReturningClause<(id, name, last_message, participant_ids, created_at)>` to implement `QueryFragment<Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the full type name has been written to '/Users/mac/Documents/Learning/Chat-Rust-React/Server/rust-react-chat/target/debug/deps/rust_react_chat-0a1703c367b7b9aa.long-type-1854308722750302184.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `UpdateStatement<table, WhereClause<Grouped<Eq<id, Bound<Text, String>>>>, Assign<..., ...>, ...>` to implement `QueryFragment<Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the full type name has been written to '/Users/mac/Documents/Learning/Chat-Rust-React/Server/rust-react-chat/target/debug/deps/rust_react_chat-0a1703c367b7b9aa.long-type-229587550759029850.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `UpdateStatement<table, WhereClause<Grouped<Eq<id, Bound<Text, String>>>>, Assign<..., ...>>` to implement `LoadQuery<'_, diesel::SqliteConnection, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the full type name has been written to '/Users/mac/Documents/Learning/Chat-Rust-React/Server/rust-react-chat/target/debug/deps/rust_react_chat-0a1703c367b7b9aa.long-type-5987731672179071003.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `get_result`","code":null,"level":"note","spans":[{"file_name":"/Users/mac/.cargo/registry/src/github.com-1ecc6299db9ec823/diesel-2.1.0/src/query_dsl/mod.rs","byte_start":59336,"byte_end":59362,"line_start":1723,"line_end":1723,"column_start":15,"column_end":41,"is_primary":true,"text":[{"text":"        Self: LoadQuery<'query, Conn, U>,","highlight_start":15,"highlight_end":41}],"label":"required by this bound in `RunQueryDsl::get_result`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `ReturningClause<(schema::rooms::columns::id, schema::rooms::columns::name, schema::rooms::columns::last_message, schema::rooms::columns::participant_ids, schema::rooms::columns::created_at)>: QueryFragment<Sqlite, DoesNotSupportReturningClause>` is not satisfied\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/db.rs:76:17\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m76\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    .get_result(conn);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `QueryFragment<Sqlite, DoesNotSupportReturningClause>` is not implemented for `ReturningClause<(schema::rooms::columns::id, schema::rooms::columns::name, schema::rooms::columns::last_message, schema::rooms::columns::participant_ids, schema::rooms::columns::created_at)>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `QueryFragment<DB, SP>`:\u001b[0m\n\u001b[0m               <ReturningClause<Expr> as QueryFragment<DB, PgLikeReturningClause>>\u001b[0m\n\u001b[0m               <ReturningClause<Expr> as QueryFragment<DB, sqlite::backend::SqliteReturningClause>>\u001b[0m\n\u001b[0m               <ReturningClause<Expr> as QueryFragment<DB>>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `ReturningClause<(id, name, last_message, participant_ids, created_at)>` to implement `QueryFragment<Sqlite>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full type name has been written to '/Users/mac/Documents/Learning/Chat-Rust-React/Server/rust-react-chat/target/debug/deps/rust_react_chat-0a1703c367b7b9aa.long-type-1854308722750302184.txt'\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `UpdateStatement<table, WhereClause<Grouped<Eq<id, Bound<Text, String>>>>, Assign<..., ...>, ...>` to implement `QueryFragment<Sqlite>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full type name has been written to '/Users/mac/Documents/Learning/Chat-Rust-React/Server/rust-react-chat/target/debug/deps/rust_react_chat-0a1703c367b7b9aa.long-type-229587550759029850.txt'\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `UpdateStatement<table, WhereClause<Grouped<Eq<id, Bound<Text, String>>>>, Assign<..., ...>>` to implement `LoadQuery<'_, diesel::SqliteConnection, _>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full type name has been written to '/Users/mac/Documents/Learning/Chat-Rust-React/Server/rust-react-chat/target/debug/deps/rust_react_chat-0a1703c367b7b9aa.long-type-5987731672179071003.txt'\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `get_result`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/mac/.cargo/registry/src/github.com-1ecc6299db9ec823/diesel-2.1.0/src/query_dsl/mod.rs:1723:15\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1723\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self: LoadQuery<'query, Conn, U>,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `RunQueryDsl::get_result`\u001b[0m\n\n"}
{"message":"aborting due to 4 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 4 previous errors\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0277`.\u001b[0m\n"}
